// components/sld/ui/sldThemeUtils.ts
import { Node } from 'reactflow';
import { SLDElementType } from '@/types/sld'; // Ensure this path is correct for your project structure

// Define a type for the object returned by getThemeAwareColors
// This ensures consistency when this object is passed to other functions.
export interface ThemeAwarePalette {
  miniMapBg: string;
  miniMapBorder: string;
  nodeColorDefault: string;        // Default fill for nodes in minimap
  nodeColorInput: string;          // Fill for 'input' type nodes in minimap
  nodeColorOutput: string;         // Fill for 'output' type nodes in minimap
  nodeColorDefaultStroke: string;  // Default stroke for nodes in minimap
  maskBg: string;                  // Background color of the minimap viewport mask
  maskStroke: string;              // Border color of the minimap viewport mask
  backgroundDots: string;          // Color of the dots in the ReactFlow background
  // You can add more theme-dependent color definitions here as needed
}

/**
 * Generates a palette of theme-aware colors for the SLD widget.
 * @param theme The current theme name, typically 'light' or 'dark'.
 * @returns An object (ThemeAwarePalette) containing various color strings for UI elements.
 */
export const getThemeAwareColors = (theme: string | undefined | null): ThemeAwarePalette => {
  const currentTheme = theme || 'light'; // Default to light if theme is undefined or null

  return {
    miniMapBg: currentTheme === 'dark' ? '#1A1A1A' : '#F5F5F5', // Slightly darker/lighter for better contrast
    miniMapBorder: currentTheme === 'dark' ? '#333333' : '#DDDDDD',
    
    // Node colors for MiniMap - these are general and can be customized
    // The getNodeColor function below will use these based on node.type
    nodeColorDefault: currentTheme === 'dark' ? '#4A4A4A' : '#D3D3D3', // Generic node color
    nodeColorInput: currentTheme === 'dark' ? '#005A4E' : '#B2DFDB',    // For nodes considered "inputs" (e.g., Grid)
    nodeColorOutput: currentTheme === 'dark' ? '#0D47A1' : '#BBDEFB',  // For nodes considered "outputs" (e.g., Panel)
    
    nodeColorDefaultStroke: currentTheme === 'dark' ? '#777777' : '#888888', // Stroke for minimap nodes
    
    maskBg: currentTheme === 'dark' ? 'rgba(200, 200, 200, 0.15)' : 'rgba(50, 50, 50, 0.1)', // Viewport mask
    maskStroke: currentTheme === 'dark' ? 'rgba(220, 220, 220, 0.25)' : 'rgba(30, 30, 30, 0.35)', // Viewport mask border

    backgroundDots: currentTheme === 'dark' ? '#383838' : '#BBBBBB', // Color for the Background component dots
  };
};

/**
 * Determines the fill color for a node in the MiniMap based on its type and the current theme's color palette.
 * Note: The 'node.type' here is the string type assigned to the ReactFlow node,
 * which typically corresponds to a key in your `nodeTypes` object (e.g., 'inverter', 'panel').
 * 
 * @param node A ReactFlow Node object (or at least an object with a 'type' property).
 * @param colors The theme-aware color palette generated by `getThemeAwareColors`.
 * @returns A string representing the node's fill color for the MiniMap.
 */
export const getNodeColor = (node: Pick<Node, 'type'>, colors: ThemeAwarePalette): string => {
  // Ensure node.type is treated as a string for comparison with SLDElementType enum values
  const nodeTypeString = node.type as string;

  switch (nodeTypeString) {
    // Assign specific colors based on SLDElementType (which are strings)
    case SLDElementType.Grid:
    case SLDElementType.Breaker: // Example: Breakers might be themed as inputs
      return colors.nodeColorInput;

    case SLDElementType.Panel:
    case SLDElementType.Battery:
      return colors.nodeColorOutput;
    
    case SLDElementType.Inverter:
      return colors.nodeColorDefault; // Or a specific color like: theme === 'dark' ? '#...' : '#...'
      
    case SLDElementType.Load:
      return colors.nodeColorOutput; // Example: Loads consuming power

    case SLDElementType.TextLabel:
    case SLDElementType.DataLabel:
      return colors.nodeColorDefault; // Labels might be neutral

    // Add more cases for other SLDElementTypes as needed
    // e.g., case SLDElementType.Contactor: return theme === 'dark' ? '#C72C41' : '#800000'; // Example

    default:
      // Fallback for any other ReactFlow node types or unhandled SLDElementTypes
      return colors.nodeColorDefault;
  }
};

/**
 * Determines the stroke (border) color for a node in the MiniMap.
 * @param node The ReactFlow Node object (currently, type is not used to vary stroke color, but available).
 * @param colors The theme-aware color palette from `getThemeAwareColors`.
 * @returns A string representing the node's stroke color for the MiniMap.
 */
export const getNodeStrokeColor = (node: Pick<Node, 'type'>, colors: ThemeAwarePalette): string => {
  // For now, using a single default stroke color.
  // This could be expanded like getNodeColor if needed.
  return colors.nodeColorDefaultStroke;
};

/**
 * Flow colors for AnimatedFlowEdge - these are semantic rather than theme-dependent typically,
 * but could be moved into getThemeAwareColors if theme-specific variations are desired.
 */
export const flowColors = {
  AC_HV: '#FFBF00',         // Bright Yellow-Orange for High Voltage AC
  AC_MV: '#FFA500',         // Orange for Medium Voltage AC
  AC_LV: '#FF6347',         // Tomato Red for Low Voltage AC
  DC_HV: '#1E90FF',         // DodgerBlue for High Voltage DC
  DC_MV: '#00BFFF',         // DeepSkyBlue for Medium Voltage DC
  DC_LV: '#87CEFA',         // LightSkyBlue for Low Voltage DC
  CONTROL_SIGNAL: '#32CD32',// LimeGreen for control signals
  AUX_POWER: '#DA70D6',     // Orchid for auxiliary power
  ENERGIZED_DEFAULT: '#7CFC00',// LawnGreen (generic energized)
  OFFLINE: '#A9A9A9',       // DarkGray for offline or de-energized lines
  FAULT: '#DC143C',         // Crimson Red for faults
  WARNING: '#FFD700',       // Gold/Yellow for warnings
  SELECTED_STROKE: '#007AFF', // A distinct blue for selected edges (often UI accent)
};

/**
 * Stroke widths for different voltage levels on edges.
 */
export const voltageStrokeWidths = {
  HV: 4.5,
  MV: 3.5,
  LV: 2.5,
  ELV: 2, // For control/auxiliary/signals (Extra Low Voltage)
  DEFAULT: 2.5,
};

/**
 * How much to increase strokeWidth when an edge is selected.
 */
export const SELECTED_STROKE_WIDTH_INCREASE = 1.5;